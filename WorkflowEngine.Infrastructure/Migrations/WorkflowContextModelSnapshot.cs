// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkflowEngine.Infrastructure.Data;

#nullable disable

namespace WorkflowEngine.Infrastructure.Migrations
{
    [DbContext(typeof(WorkflowContext))]
    partial class WorkflowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.Campo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EsInterno")
                        .HasColumnType("bit");

                    b.Property<string>("MensajeCliente")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RegexCliente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RegexServidor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TipoDato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Campos", (string)null);
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.CampoFlujoActivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCampo")
                        .HasColumnType("int");

                    b.Property<int>("IdFlujoActivo")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("IdCampo");

                    b.HasIndex("IdFlujoActivo", "IdCampo")
                        .IsUnique();

                    b.ToTable("CamposFlujosActivos", (string)null);
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.FlujoActivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstadoFlujo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCompletado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("IdSecuenciaActual")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoFlujo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoFlujo");

                    b.ToTable("FlujosActivos", (string)null);
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.Paso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ListaIdCampos")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SecuenciaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPaso")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecuenciaId");

                    b.ToTable("Pasos", (string)null);
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.PasoCampo", b =>
                {
                    b.Property<int>("IdPaso")
                        .HasColumnType("int");

                    b.Property<int>("IdCampo")
                        .HasColumnType("int");

                    b.Property<bool>("EsRequerido")
                        .HasColumnType("bit");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("IdPaso", "IdCampo");

                    b.HasIndex("IdCampo");

                    b.ToTable("PasosCampos", (string)null);
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.Secuencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdTipoFlujo")
                        .HasColumnType("int");

                    b.Property<string>("ListaIdPasos")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoFlujo");

                    b.ToTable("Secuencias", (string)null);
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.TipoFlujo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSecuenciaFinal")
                        .HasColumnType("int");

                    b.Property<int>("IdSecuenciaInicial")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrdenSecuencias")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("TiposFlujo", (string)null);
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.CampoFlujoActivo", b =>
                {
                    b.HasOne("WorkflowEngine.Domain.Entities.Campo", "Campo")
                        .WithMany("CamposFlujosActivos")
                        .HasForeignKey("IdCampo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Domain.Entities.FlujoActivo", "FlujoActivo")
                        .WithMany("CamposFlujosActivos")
                        .HasForeignKey("IdFlujoActivo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campo");

                    b.Navigation("FlujoActivo");
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.FlujoActivo", b =>
                {
                    b.HasOne("WorkflowEngine.Domain.Entities.TipoFlujo", "TipoFlujo")
                        .WithMany("FlujosActivos")
                        .HasForeignKey("IdTipoFlujo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoFlujo");
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.Paso", b =>
                {
                    b.HasOne("WorkflowEngine.Domain.Entities.Secuencia", null)
                        .WithMany("Pasos")
                        .HasForeignKey("SecuenciaId");
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.PasoCampo", b =>
                {
                    b.HasOne("WorkflowEngine.Domain.Entities.Campo", "Campo")
                        .WithMany("PasosCampos")
                        .HasForeignKey("IdCampo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Domain.Entities.Paso", "Paso")
                        .WithMany("PasosCampos")
                        .HasForeignKey("IdPaso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campo");

                    b.Navigation("Paso");
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.Secuencia", b =>
                {
                    b.HasOne("WorkflowEngine.Domain.Entities.TipoFlujo", "TipoFlujo")
                        .WithMany("Secuencias")
                        .HasForeignKey("IdTipoFlujo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoFlujo");
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.Campo", b =>
                {
                    b.Navigation("CamposFlujosActivos");

                    b.Navigation("PasosCampos");
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.FlujoActivo", b =>
                {
                    b.Navigation("CamposFlujosActivos");
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.Paso", b =>
                {
                    b.Navigation("PasosCampos");
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.Secuencia", b =>
                {
                    b.Navigation("Pasos");
                });

            modelBuilder.Entity("WorkflowEngine.Domain.Entities.TipoFlujo", b =>
                {
                    b.Navigation("FlujosActivos");

                    b.Navigation("Secuencias");
                });
#pragma warning restore 612, 618
        }
    }
}
